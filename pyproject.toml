[tool.poetry]
name = "aircraft-service"
version = "0.1.0"
description = ""
authors = ["DR Code <diego.rodriguez.se.dr@gmail.com>"]
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.116.1"
uvicorn = "^0.35.0"
pydantic-settings = "^2.10.1"
httpx = "^0.28.1"
pytest = "^8.4.1"
pytest-cov = "^6.2.1"
pytest-asyncio = "^1.1.0"
mypy = "^1.17.1"

[tool.poetry.group.dev.dependencies]
wemake-python-styleguide = "^1.3.0"
ruff = "^0.12.8"

[tool.pytest.ini_options]
pythonpath = "."

[tool.coverage.run]
source = ["app"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.flake8]
line-length = 80
exclude = [".venv", ".git", "__pycache__", "test_*.py"]

[tool.ruff]
preview = true
fix = true
target-version = "py310"
line-length = 80
extend-exclude = [
  ".venv", ".git", "__pycache__"
]

[tool.ruff.format]
quote-style = "single"
docstring-code-format = false

[tool.ruff.lint]
ignore = [
  "A005",   # allow to shadow stdlib and builtin module names
  "COM812", # trailing comma, conflicts with `ruff format`
  "D100",
  "D104",
  "D106",
  "D203",
  "D212",
  "D401",
  "D404",
  "D405",
  "ISC001",  # implicit string concat conflicts with `ruff format`
  "ISC003",  # prefer explicit string concat over implicit concat
  "PLR09",   # we have our own complexity rules
  "PLR2004", # do not report magic numbers
  "PLR6301", # do not require classmethod / staticmethod when self not used
  "TRY003",  # long exception messages from `tryceratops`
]
external = [ "WPS" ]
flake8-import-conventions.banned-from = [ "ast", "datetime" ]
flake8-import-conventions.aliases = { datetime = "dt" }
flake8-quotes.inline-quotes = "single"
mccabe.max-complexity = 6
pydocstyle.convention = "google"

[tool.poetry.plugins."flake8.extension"]
WPS = "wemake_python_styleguide.checker:Checker"

[tool.poetry.plugins."flake8.report"]
wemake = "wemake_python_styleguide.formatter:WemakeFormatter"
